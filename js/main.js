// public/js/main.js

import {
  saveSteps,
  loadSteps,
  saveHistory,
  loadSettings
} from './storage.js';

const webApp = Telegram.WebApp;
const btn    = document.getElementById('toggle');
const out    = document.getElementById('count');
const msg    = document.getElementById('message');

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
let steps = loadSteps();    // –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è —à–∞–≥–∏
out.textContent = steps;

let g = 0, lastTime = 0;
const alpha = 0.975, THRESHOLD = 1.2, MIN_INTERVAL = 300;

// –§–ª–∞–≥: –¥–æ–∂–¥–∞–ª–∏—Å—å –ª–∏ –ø–µ—Ä–≤–æ–π —Ç—Ä—è—Å–∫–∏?
let isCalibrated = false;

// --- –í–µ—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¢–µ–ª–µ–≥—Ä–∞–º–∞ ---
webApp.onEvent('accelerometerStarted', () => {
  // –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ –¥–∞—Ç—á–∏–∫–∞ –∂–¥—ë–º –≤—Å–ø–ª–µ—Å–∫–∞, –Ω–µ –º–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫—É
  btn.textContent = '–í—Å—Ç—Ä—è—Ö–Ω–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω';
  btn.disabled = false;
  msg.textContent = '';
});

webApp.onEvent('accelerometerChanged', () => {
  const { x, y, z } = Telegram.WebApp.Accelerometer;
  const mag = Math.hypot(x, y, z);
  g = alpha * g + (1 - alpha) * mag;
  const a = mag - g;
  const now = performance.now();

  // –µ—Å–ª–∏ –µ—â—ë –Ω–µ –æ—Ç–∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–æ ‚Äî –∂–¥—ë–º –ø–µ—Ä–≤–æ–≥–æ –ø–∏–∫–∞
  if (!isCalibrated) {
    if (a > THRESHOLD) {
      isCalibrated = true;
      msg.textContent = '–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –∏–¥—ë–º üòä';
      btn.textContent = '–°—Ç–æ–ø';
    }
    return;
  }

  // –ø–æ—Å–ª–µ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ —Å—á–∏—Ç–∞–µ–º —à–∞–≥–∏
  if (a > THRESHOLD && now - lastTime > MIN_INTERVAL) {
    steps++;
    lastTime = now;
    out.textContent = steps;
    saveSteps(steps);
    checkNotifications();
  }
});

webApp.onEvent('accelerometerFailed', ({ error }) => {
  btn.textContent = '–°—Ç–∞—Ä—Ç';
  btn.disabled = false;
  msg.textContent = '–û—à–∏–±–∫–∞ –∞–∫—Å–µ–ª–µ—Ä–æ–º–µ—Ç—Ä–∞: ' + (error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è');
});

webApp.onEvent('accelerometerStopped', () => {
  btn.textContent = '–°—Ç–∞—Ä—Ç';
  btn.disabled = false;
  msg.textContent = '–ü–∞—É–∑–∞';
  // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é, –Ω–æ –ù–ï –æ–±–Ω—É–ª—è–µ–º steps
  saveHistory({
    date: new Date().toISOString().slice(0, 10),
    steps
  });
});

// --- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ % —Ü–µ–ª–∏ ---
function checkNotifications() {
  const { goal = 0, notifyPercents = [] } = loadSettings();
  if (!goal || !notifyPercents.length) return;
  notifyPercents.forEach(p => {
    if (steps === Math.floor(goal * p / 100)) {
      webApp.showAlert(`–í—ã –ø—Ä–æ—à–ª–∏ ${p}% –æ—Ç —Ü–µ–ª–∏!`);
    }
  });
  if (steps === goal) {
    webApp.showAlert('–¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ üéâ');
  }
}

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –°—Ç–∞—Ä—Ç/–°—Ç–æ–ø ---
btn.addEventListener('click', () => {
  btn.disabled = true;

  if (Telegram.WebApp.Accelerometer.isStarted) {
    // –°—Ç–æ–ø
    Telegram.WebApp.Accelerometer.stop();
    return;
  }

  // –°—Ç–∞—Ä—Ç: –∑–∞–ø—É—Å–∫–∞–µ–º –∞–∫—Å–µ–ª–µ—Ä–æ–º–µ—Ç—Ä –∏ –∂–¥—ë–º —Ç—Ä—è—Å–∫—É
  isCalibrated = false;
  lastTime = 0;
  btn.textContent = '–ó–∞–ø—Ä–æ—Å‚Ä¶';
  Telegram.WebApp.Accelerometer.start({ refresh_rate: 100 });
});

// --- –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å UI ---
webApp.ready();
