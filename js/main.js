// public/js/main.js

import {
  saveSteps,
  loadSteps,
  saveHistory,
  loadSettings
} from './storage.js';

const webApp = Telegram.WebApp;
const btn    = document.getElementById('toggle');
const out    = document.getElementById('count');
const msg    = document.getElementById('message');

// --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ---
let steps = loadSteps();    // –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è —à–∞–≥–∏
out.textContent = steps;

let g = 0;
let lastTime = 0;
const alpha = 0.975;
const THRESHOLD = 1.2;
const MIN_INTERVAL = 300;

// –§–ª–∞–≥ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏: –¥–æ–∂–¥–∞–ª–∏—Å—å –ø–µ—Ä–≤–æ–π —Ç—Ä—è—Å–∫–∏?
let isCalibrated = false;

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram.WebApp ---
webApp.onEvent('accelerometerStarted', () => {
  // –ü–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ –∂–¥–µ–º —Ç—Ä—è—Å–∫—É, –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —à–∞–≥–∏
  btn.textContent = '–í—Å—Ç—Ä—è—Ö–Ω–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω';
  btn.disabled = false;
  msg.textContent = '';
});

// –û–±—â–∏–π —Å–ª—É—à–∞—Ç–µ–ª—å: –∏ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞, –∏ –ø–æ–¥—Å—á–µ—Ç
webApp.onEvent('accelerometerChanged', () => {
  const { x, y, z } = Telegram.WebApp.Accelerometer;
  const mag = Math.hypot(x, y, z);

  // –§–∏–ª—å—Ç—Ä –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–∏
  g = alpha * g + (1 - alpha) * mag;
  const a = mag - g;
  const now = performance.now();

  // 1) –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞: –∂–¥—ë–º –ø–µ—Ä–≤–æ–≥–æ –ø–∏–∫–∞
  if (!isCalibrated) {
    if (a > THRESHOLD) {
      isCalibrated = true;
      lastTime = now;
      msg.textContent = '–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–∞—á–∏–Ω–∞–µ–º —Å—á–∏—Ç–∞—Ç—å —à–∞–≥–∏!';
      btn.textContent = '–°—Ç–æ–ø';
    }
    return;
  }

  // 2) –ü–æ—Å–ª–µ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ ‚Äî –ø–æ–¥—Å—á–µ—Ç —à–∞–≥–æ–≤
  if (a > THRESHOLD && now - lastTime > MIN_INTERVAL) {
    steps++;
    lastTime = now;
    out.textContent = steps;
    saveSteps(steps);
    checkNotifications();
  }
});

webApp.onEvent('accelerometerFailed', ({ error }) => {
  btn.textContent = '–°—Ç–∞—Ä—Ç';
  btn.disabled = false;
  msg.textContent = '–û—à–∏–±–∫–∞ –∞–∫—Å–µ–ª–µ—Ä–æ–º–µ—Ç—Ä–∞: ' + (error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è');
});

webApp.onEvent('accelerometerStopped', () => {
  btn.textContent = '–°—Ç–∞—Ä—Ç';
  btn.disabled = false;
  msg.textContent = '–ü–∞—É–∑–∞';
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é (–Ω–µ –æ–±–Ω—É–ª—è–µ–º steps)
  saveHistory({
    date: new Date().toISOString().slice(0, 10),
    steps
  });
});

// --- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ % —Ü–µ–ª–∏ ---
function checkNotifications() {
  const { goal = 0, notifyPercents = [] } = loadSettings();
  if (!goal || !notifyPercents.length) return;

  notifyPercents.forEach(p => {
    if (steps === Math.floor(goal * p / 100)) {
      webApp.showAlert(`–í—ã –ø—Ä–æ—à–ª–∏ ${p}% –æ—Ç —Ü–µ–ª–∏!`);
    }
  });
  if (steps === goal) {
    webApp.showAlert('–¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ üéâ');
  }
}

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –°—Ç–∞—Ä—Ç/–°—Ç–æ–ø ---
btn.addEventListener('click', () => {
  btn.disabled = true;

  if (Telegram.WebApp.Accelerometer.isStarted) {
    // –°—Ç–æ–ø
    Telegram.WebApp.Accelerometer.stop();
    return;
  }

  // –°—Ç–∞—Ä—Ç: —Å–∫–∏–¥—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏, –∂–¥–µ–º –ø–µ—Ä–≤–æ–π —Ç—Ä—è—Å–∫–∏
  isCalibrated = false;
  lastTime = 0;
  btn.textContent = '–ó–∞–ø—Ä–æ—Å‚Ä¶';
  Telegram.WebApp.Accelerometer.start({ refresh_rate: 100 });
});

// --- –°–æ–æ–±—â–∞–µ–º Telegram, —á—Ç–æ UI –≥–æ—Ç–æ–≤ ---
webApp.ready();
